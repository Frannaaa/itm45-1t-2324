# Francine Y. de Asis, 221927
# March 7, 2024

# I/we certify that this submission complies with the DISCS Academic Integrity
# Policy.

# If I/we have discussed my/our Python language code with anyone other than
# my/our instructor(s), my/our groupmate(s), the teaching assistant(s),
# the extent of each discussion has been clearly noted along with a proper
# citation in the comments of my/our program.

# If any Python language code or documentation used in my/our program
# was obtained from another source, either modified or unmodified, such as a
# textbook, website, or another individual, the extent of its use has been
# clearly noted along with a proper citation in the comments of my/our program.

################################################################################

# cite your sources here, if any

################################################################################
# Francine Y. de Asis, 221927
# March 7, 2024 

# I/we certify that this submission complies with the DISCS Academic Integrity
# Policy.

# If I/we have discussed my/our Python language code with anyone other than
# my/our instructor(s), my/our groupmate(s), the teaching assistant(s),
# the extent of each discussion has been clearly noted along with a proper
# citation in the comments of my/our program.

# If any Python language code or documentation used in my/our program
# was obtained from another source, either modified or unmodified, such as a
# textbook, website, or another individual, the extent of its use has been
# clearly noted along with a proper citation in the comments of my/our program.

################################################################################

# cite your sources here, if any

################################################################################
#additional features for uniqueness: supports phrases, two or more words/phrase, hints if 3 mistakes straight, for random list they can choose easy (4 letters max), medium (4-6 letters), or hard (7-any number of letters)
#avoid using index, .choice, chr, sum, enumerate, .replace, join , next, all  format , .join(), .isdigit(), .lstrip(), all(), enumerate, .isalpha(), and of .values . sum, any, max, next. import randomimport random
#expands to numbers 


'''
questions:
-can allowed phrases be an orig feature 
- incorporating hangman stage but also the any number of guesses, is it possible it just restarts?
 - in and not in, as a compa opera not allowed

'''
import random

# Global variables Preset words list, all in uppercase for consistency
WORDS = [
    "DIE", "TOP", "CRY", "MIKU", "LINK", "CODE", "SKYRIM", "MALENIA", "STARDUST",
    "SUPERCALIFRAGILISTICEXPIALIDOCIOUS", "PNEUMONOULTRAMICROSCOPICSILICOVOLCANOCONIOSIS",
    "WHAT IF I CRY AND EXPLODE INTO STARDUST", "LIFE IS BEAUTIFUL EVEN IF YOU DO BREAKDOWN OVER THIS CODE",
    "MOM PICK ME UP I AM SCARED"
]

# Utlityt Functions Define uppercase and lowercase alphabets for letter conversion
alphabet_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
alphabet_lower = "abcdefghijklmnopqrstuvwxyz"

# Hangman stick figure stages
hangman_stages = [
    """
    _____
    |   |
    |
    |
    |
    |
    """,
    """
    _____
    |   |
    |   O
    |
    |
    |
    """,
    """
    _____
    |   |
    |   O
    |   |
    |
    |
    """,
    """
    _____
    |   |
    |   O
    |  /|
    |
    |
    """,
    """
    _____
    |   |
    |   O
    |  /|\\
    |
    |
    """,
    """
    _____
    |   |
    |   O
    |  /|\\
    |  /
    |
    """,
    """
    _____
    |   |
    |   O
    |  /|\\
    |  / \\
    |
    """
]

# Function to convert a lowercase character to uppercase
def char_to_upper(char):
    for i in range(len(alphabet_lower)):
        if char == alphabet_lower[i]:
            return alphabet_upper[i]
    return char

# Function to convert an entire string to uppercase
def input_to_upper(input_string):
    upper_string = ""
    for char in input_string:
        upper_string += char_to_upper(char)
    return upper_string

# Function to check if a letter is in a string
def is_letter_in_string(letter, string):
    for char in string:
        if char == letter:
            return True
    return False

# Function to get the word choice from the user,
def get_word_choice():
    valid_responses = ["YES", "NO"]
    choice = input_to_upper(input("Would you like the program to choose a random word? (Yes/No): "))
    while not validate_choice(choice, valid_responses):
        print("Invalid choice. Please enter 'Yes' or 'No'.")
        choice = input_to_upper(input("Would you like the program to choose a random word? (Yes/No): "))
    if choice == "NO":
        return input_to_upper(input("Enter the word to be guessed by your opponent: "))
    else:
        return get_difficulty()

# Function to get the difficulty level from the user
def get_difficulty():
    difficulty = input_to_upper(input("Choose difficulty (easy/medium/hard/extreme): "))
    while difficulty != "EASY" and difficulty != "MEDIUM" and difficulty != "HARD" and difficulty != "EXTREME":
        print("Please choose a valid difficulty.")
        difficulty = input_to_upper(input("Choose difficulty (easy/medium/hard/extreme): "))
    return difficulty

# Function to set the number of guesses allowed
def set_number_of_guesses():
    num_guesses = input("Please enter the number of guesses allowed: ")
    is_valid = True
    for char in num_guesses:
        if not ('0' <= char <= '9'):
            is_valid = False
            break
    if is_valid and num_guesses:
        return int(num_guesses)
    else:
        print("Invalid input. Defaulting to 6 guesses.")
        return 6

# Function to display the current status of the game
def display_status(word, guessed_letters, tries):
    display_word = ""
    for letter in word:
        if is_letter_present(letter, guessed_letters) or letter == " ":
            display_word += letter
        else:
            display_word += "-"
    print("\nGuess the word, " + str(tries) + " guess(es) left: " + display_word)
    
    unused_letters = ""
    for letter in alphabet:
        if not is_letter_present(letter, guessed_letters):
            unused_letters += letter
    print("Unused letters: " + unused_letters)

def is_letter_present(letter, string):
    for char in string:
        if char == letter:
            return True
    return False

def input_to_upper(input_string):
    upper_string = ""
    for char in input_string:
        if char >= 'a' and char <= 'z':
            upper_string += chr(ord(char) - 32)  # Convert to uppercase
        else:
            upper_string += char
    return upper_string

def validate_choice(choice, valid_options):
    for option in valid_options:
        if choice == option:
            return True
    return False

def get_word_choice():
    valid_responses = ["YES", "NO"]
    choice = input_to_upper(input("Would you like the program to choose a random word? (Yes/No): "))
    while not validate_choice(choice, valid_responses):
        print("Invalid choice. Please enter 'Yes' or 'No'.")
        choice = input_to_upper(input("Would you like the program to choose a random word? (Yes/No): "))
    if choice == "NO":
        return input_to_upper(input("Enter the word to be guessed by your opponent: "))
    else:
        return get_difficulty()

# Function to play the game
def play_game(word, max_tries):
    guessed_letters = ""
    tries_left = max_tries
    mistakes = 0

    while tries_left > 0:
        correct_guesses = 0
        for letter in word:
            # Count correctly guessed letters
            if is_letter_in_string(letter, guessed_letters) or letter == " ":
                correct_guesses += 1
        if correct_guesses == len(word):
            # If all letters guessed correctly, player wins
            print("CONGRATULATIONS! YOU WIN!")
            return

        display_status(word, guessed_letters, tries_left)
        
        guess = char_to_upper(input(""))
        
        # Convert the guessed letter to uppercase
        guess = char_to_upper(guess)

        if is_letter_present(guess, alphabet_upper) and len(guess) == 1:
            already_guessed = is_letter_in_string(guess, guessed_letters)
            if not already_guessed:
                guessed_letters += guess
                if not is_letter_in_string(guess, word):
                    tries_left -= 1
                    mistakes += 1
                else:
                    mistakes = 0
                if mistakes == 3:
                    # Provide a hint after 3 consecutive incorrect guesses
                    print("Hint: Try focusing on common vowels and consonants.")
                    mistakes = 0
            else:
                print("You have already used that letter.")
        else:
            print("Please choose a valid letter.")

    print("SORRY YOU GOT HANGED!")  # Print

# Main function to start the game
def main():
    print("LET'S PLAY HANGMAN!\n")
    word = get_word_choice()
    max_tries = set_number_of_guesses()
    play_game(word, max_tries)

    play_again = input_to_upper(input("Play again with the same word? (Yes/No): "))
    while play_again not in ["YES", "NO"]:
        print("Please enter a valid option (Yes/No).")
        play_again = input_to_upper(input("Play again with the same word? (Yes/No): "))

    if play_again == "YES":
        play_game(word, max_tries)
    elif play_again == "NO":
        start_new_game = input_to_upper(input("Start a new game? (Yes/No): "))
        while start_new_game not in ["YES", "NO"]:
            print("Please enter a valid option.")
            start_new_game = input_to_upper(input("Start a new game? (Yes/No): "))
            
        if start_new_game == "YES":
            main()
        elif start_new_game == "NO":
            return
        else:
            print("Invalid input. Exiting the game.")

# Entry point of the program
if __name__ == "__main__":
    main()
