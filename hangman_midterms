# Francine Y. de Asis, 221927
# March 7, 2024

# I/we certify that this submission complies with the DISCS Academic Integrity
# Policy.

# If I/we have discussed my/our Python language code with anyone other than
# my/our instructor(s), my/our groupmate(s), the teaching assistant(s),
# the extent of each discussion has been clearly noted along with a proper
# citation in the comments of my/our program.

# If any Python language code or documentation used in my/our program
# was obtained from another source, either modified or unmodified, such as a
# textbook, website, or another individual, the extent of its use has been
# clearly noted along with a proper citation in the comments of my/our program.

################################################################################

# cite your sources here, if any

################################################################################
# Francine Y. de Asis, 221927
# March 7, 2024 

# I/we certify that this submission complies with the DISCS Academic Integrity
# Policy.

# If I/we have discussed my/our Python language code with anyone other than
# my/our instructor(s), my/our groupmate(s), the teaching assistant(s),
# the extent of each discussion has been clearly noted along with a proper
# citation in the comments of my/our program.

# If any Python language code or documentation used in my/our program
# was obtained from another source, either modified or unmodified, such as a
# textbook, website, or another individual, the extent of its use has been
# clearly noted along with a proper citation in the comments of my/our program.

################################################################################

# cite your sources here, if any

################################################################################
#additional features for uniqueness: supports phrases, can choose difficulty levels, hangman display, uppercase and lowercase valid can be custom or let program choose word for you,hints if 3 mistakes straight, for random list they can choose easy (4 letters max), medium (4-6 letters), or hard (7-any number of letters)
#avoid using index, .choice, chr, sum, enumerate, .replace, join , next, all  format , .join(), .isdigit(), .lstrip(), all(), enumerate, .isalpha(), and of .values . sum, any, max, next. import randomimport random
#to fix: hangman display figure, remove ord 

'''
questions:
-can allowed phrases be an orig feature 
- incorporating hangman stage but also the any number of guesses, is it possible it just restarts?
 - in and not in, as a compa opera not allowed
 - letter_found

'''

import random
from typing import List

# Global variables Preset words list, all in uppercase for consistency
WORDSLIST = [
    "DIE", "TOP", "CRY", "MIKU", "LINK", "CODE", "SKYRIM", "MALENIA", "STARDUST",
    "SUPERCALIFRAGILISTICEXPIALIDOCIOUS", "PNEUMONOULTRAMICROSCOPICSILICOVOLCANOCONIOSIS",
    "WHAT IF I CRY AND EXPLODE INTO STARDUST", "LIFE IS BEAUTIFUL EVEN IF YOU DO BREAKDOWN OVER THIS CODE",
    "MOM PICK ME UP I AM SCARED","IM SORRY I GENUINELY JUST BLACKOUT WHEN IM SCARED"
]

# Utlity Functions Define uppercase and lowercase alphabets for letter conversion
ALPHABET_INCAPS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
ALPHABET_INLOWERCASE = "abcdefghijklmnopqrstuvwxyz"
FINALACTUAL_ALPHABET= ALPHABET_INCAPS  # This is assuming you're using uppercase letters for unused letters display

# Function to convert an entire string to uppercase
def CONVERTSTRING_TOALLCAPS(input_string): 
    upper_string = ""
    for char in input_string:
        for i in range(len(ALPHABET_INLOWERCASE)):
            if char == ALPHABET_INLOWERCASE[i]:
                upper_string += ALPHABET_INCAPS[i]
                break
        else:
            upper_string += char  # If character is not in ALPHABET_INLOWERCASE, add it as is
    return upper_string

def SHOWSTICKMAN(cur_guesses):
    # assume cur_guesses <= 26
    height = 10
    width = 19
    stickman = [[" " for i in range(width)] for i in range(height)]
    for row in range(1, height):
        stickman[row][0] = "|"
    for col in range(13):
        stickman[0][col] = "-"
    stickman[1][12] = "|"

    if cur_guesses >= 1:
        stickman[2][12] = 'O'
        cur_guesses -= 1
    if cur_guesses >= 1:
        stickman[3][12] = '|'
        cur_guesses -= 1

    limbs = [cur_guesses//4 for i in range(4)]
    for i in range(cur_guesses%4):
        limbs[i] += 1
    
    # left arm
    for i in range(limbs[0]):
        stickman[3][12-i-1] = '-'
    
    # right arm
    for i in range(limbs[1]):
        stickman[3][12+i+1] = '-'
    
    # left foot
    for i in range(limbs[2]):
        stickman[4+i][12-i-1] = '/'
    
    # right foot
    for i in range(limbs[3]):
        stickman[4+i][12+i+1] = '\\'

    for row in stickman:
        print(*row, sep='')

def CHOOSE_FINALWORD():
    choice = CONVERTSTRING_TOALLCAPS(input("Would you like the program to choose a random word? (Yes/No): "))
    
    while choice != "YES" and choice != "NO":
        print("Invalid choice. Please enter 'Yes' or 'No'.")
        choice = CONVERTSTRING_TOALLCAPS(input("Would you like the program to choose a random word? (Yes/No): "))
    
    if choice == "NO":
        while True:
            word = CONVERTSTRING_TOALLCAPS(input("Enter the word to be guessed by your opponent: "))
            valid_word = True
            for char in word:
                if char != " ":
                    char_found = False
                    for allowed_char in FINALACTUAL_ALPHABET:
                        if char == allowed_char:
                            char_found = True
                            break
                    if not char_found:
                        valid_word = False
                        print("The word should only contain valid characters and spaces. Please try again.")
                        break
            if valid_word:
                return word
    else:
        difficulty_input_valid = False
        while not difficulty_input_valid:
            difficulty = CONVERTSTRING_TOALLCAPS(input("Choose difficulty (easy/medium/hard/extreme): "))
            if difficulty == "EASY":
                filtered_words = [word for word in WORDSLIST if len(word) <= 4]
                difficulty_input_valid = True
            elif difficulty == "MEDIUM":
                filtered_words = [word for word in WORDSLIST if 5 <= len(word) <= 6]
                difficulty_input_valid = True
            elif difficulty == "HARD":
                filtered_words = [word for word in WORDSLIST if len(word) > 9 and " " not in word]
                difficulty_input_valid = True
            elif difficulty == "EXTREME":
                filtered_words = [word for word in WORDSLIST if " " in word]
                difficulty_input_valid = True
            else:
                print("Please choose a valid difficulty.")
        
        if not filtered_words:
            print("No words available for this difficulty. Please choose a different difficulty.")
            return CHOOSE_FINALWORD()  # Ensuring a valid word is chosen
        
        random_index = int(random.random() * len(filtered_words))
        return filtered_words[random_index]
    
# Function to display the current status of the game
def SHOW_GAMESTATUS(word, guessed_letters, tries):
    print("\nGuess the word, " + str(tries) + " guess(es) left: ", end="")
    # Manually building the displayed word string
    displayed_word = ""
    for letter in word:
        letter_found = False
        for guessed_letter in guessed_letters:
            if letter == guessed_letter or letter == " ":
                displayed_word += letter
                letter_found = True
                break  # Break out of the inner loop once the letter is found
        if not letter_found:
            displayed_word += "-"
    print(displayed_word)

    # Manually building the string for unused letters
    print("Unused letters: ", end="")
    unused_letters = ""
    for letter in FINALACTUAL_ALPHABET:
        letter_used = False
        for guessed_letter in guessed_letters:
            if letter == guessed_letter:
                letter_used = True
                break  # Break out of the inner loop once the letter is found
        if not letter_used:
            unused_letters += letter
    print(unused_letters)

def main(word=None, max_tries=None):
    if not word:  # If no word provided, get a word choice
        print("LET'S PLAY HANGMAN!\n")
        word = CHOOSE_FINALWORD()

    if not max_tries:  # If no max_tries provided, ask for it
        while True:
            num_guesses_input = input("Please enter the number of guesses allowed: ")
            if num_guesses_input.isdigit():
                max_tries = int(num_guesses_input)
                break
            else:
                print("Invalid input. Please enter a numerical value.")
        if max_tries < 1:  # Ensuring at least one guess is allowed
            print("Invalid input. Defaulting to 6 guesses.")
            max_tries = 6

    PLAY_HANGMAN(word, max_tries)

    # Ask to play again with the same word
    play_again = CONVERTSTRING_TOALLCAPS(input("Play again with the same word? (Yes/No): "))
    while play_again != "YES" and play_again != "NO":
        print("Please enter 'Yes' or 'No'.")
        play_again = CONVERTSTRING_TOALLCAPS(input("Play again with the same word? (Yes/No): "))

    if play_again == "YES":
        main(word, max_tries)
    else:
        # If not replaying with the same word, ask to start a new game
        start_new_game = CONVERTSTRING_TOALLCAPS(input("Start a new game? (Yes/No): "))
        while start_new_game != "YES" and start_new_game != "NO":
            print("Please enter 'Yes' or 'No'.")
            start_new_game = CONVERTSTRING_TOALLCAPS(input("Start a new game? (Yes/No): "))
        
        if start_new_game == "YES":
            main()  # Start a completely new game
        elif start_new_game == "NO":
            print("Thank you for playing. Goodbye!")
            return

def PLAY_HANGMAN(word, max_tries):
    guessed_letters: List[str] = []
    tries_left = max_tries
    mistakes = 0

    while tries_left > 0:
        SHOW_GAMESTATUS(word, guessed_letters, tries_left)

        cur_guesses = max_tries - tries_left
        SHOWSTICKMAN(cur_guesses)

        guess = input("Your guess: ")
        guess = CONVERTSTRING_TOALLCAPS(guess)  # Convert guess to uppercase

        valid_guess = False
        for letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            valid_guess = guess == letter
            if valid_guess:
                break

        if not valid_guess or len(guess) != 1:
            print("Invalid input. Please enter a single letter.")
            continue

        already_guessed = False
        for guessed in guessed_letters:
            already_guessed = guess == guessed
            if already_guessed:
                break

        if not already_guessed:
            guessed_letters.append(guess)

            guess_in_word = False
            for char in word:
                guess_in_word = guess == char
                if guess_in_word:
                    break

            if not guess_in_word:
                tries_left -= 1
                mistakes += 1
                if mistakes == 3:
                    print("Hint: Try focusing on common vowels and consonants.")
                    mistakes = 0
            else:
                mistakes = 0
        else:
            print("You have already used that letter.")

        all_guessed = True
        for letter in word:
            if letter != " ":
                letter_found = False
                for guessed_letter in guessed_letters:
                    letter_found = letter == guessed_letter
                    if letter_found:
                        break
                if not letter_found:
                    all_guessed = False
                    break

        if all_guessed:
            print("CONGRATULATIONS! YOU WIN!")
            return

    print("SORRY YOU GOT HANGED!")
    # Check if the player was hanged with guesses between 1 to 5
    if max_tries - tries_left < 6:
        SHOWSTICKMAN(6)  # Display full stickman
    else:
        SHOWSTICKMAN(cur_guesses)  # Display stickman according to remaining guesses
# Ensure entry point starts with no word or max_tries set
if __name__ == "__main__":
    main()
